# -*- coding: utf-8 -*-
"""handwritten_digit_recognition.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PaANNegTjvfQnZlZV8yTXzZPkb0gyYVH
"""

# Handwritten digit recognition using ANNs
 !pip install keras tensorflow numpy mnist matplotlib

#import the packages / dependencies
import mnist 
import numpy as np
from keras.models import Sequential #ANN architecture
from keras.layers import Dense,Flatten # Layers in the ANN
from keras.utils import to_categorical

# Load the data set
train_images = mnist.train_images() #training data images
train_labels = mnist.train_labels() #training data labels
test_images = mnist.test_images() #testing data images 
test_labels = mnist.test_labels() #testing data labels

# Normalize the images
# Normalize the poixel values lying between [0, 255] to [-0.5, 0.5]IN
# to make it easier to train the data
train_images = (train_images/255)
test_images = ( test_images/255)

# Flatten the images
# Flatten the images of 28 x 28 image into a 784 dimensional vector
# to pass to a neural network
#train_images = train_images.reshape((-1,784))
#test_images = test_images.reshape((-1,784))

# Build a ANN with 3 layers 
# Input layer( layer 1) has 784 (28 x 28) neurons
# Hidden layer (layer 2) has 128 neurons
# Output layer has 10 neurons
model = Sequential()
model.add(Flatten (input_shape = (28,28)))
model.add(Dense(32, activation = 'relu'))
model.add(Dense(10, activation = 'softmax'))

# Compile the model
model.compile(optimizer='adam', 
              loss = 'sparse_categorical_crossentropy', 
              metrics = ['accuracy']
              )

# Train the model 
model.fit(
    train_images,
    train_labels,
    epochs = 5,
    batch_size = 32
  
)

# Evaluate the model
model.evaluate(
    test_images,
    test_labels
)

# model.save_weights('model.h5')

# Prediction from test set
 predictions  = model.predict(test_images[:15])
 print(np.argmax(predictions,axis = 1))
 print(test_labels[:15])

